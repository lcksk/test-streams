<!DOCTYPE html>
<html>

<head>
    <title>DASH_PROFILES0110: Representation: Non-standard HbbTV not supported</title>
    <meta charset="UTF-8" />
    <script type="text/javascript" src="../../RES/testsuite.js"></script>
    <script type="text/javascript" src="../../RES/CONTRIBUTORS/RT-RK/base.js"></script>
    <script type="text/javascript" src="../../RES/CONTRIBUTORS/RT-RK/waterfall.js"></script>
    <script type="text/javascript" src="../../RES/CONTRIBUTORS/RT-RK/rtrk-visual-test-api.js"></script>
    <script type="text/javascript" src="../../RES/CONTRIBUTORS/RT-RK/release_decoding_resources.js"></script>
    <link rel="stylesheet" type="text/css" href="../../RES/CONTRIBUTORS/RT-RK/rt-rk-visuals.css"/>
    <script type="text/javascript">
        //<![CDATA[
        /************************************************************************************************************************************
         *      				Representation: Non-standard HbbTV not supported
         *
         * @assertionText - 	The src of an HTML5 video element points to a DASH MPD where the @profiles indicates 
         *						"urn:hbbtv:dash:profile:isoff-live:2013", "urn:dvb:dash:profile:dvb-dash:2014" and 
         *						"urn:dvb:dash:profile:dvb-dash:isoff-ext-live:2014". The MPD includes one each of Video, Audio and subtitle
         *						Adaptation Sets with no @profiles element. Each Adaptation Set includes one or more Representations with 
         *						@profiles set to "urn:dvb:dash:profile:dvb-dash:isoff-ext-live:2014", one or more Representations with @profiles
         *						set to "urn:hbbtv:dash:profile:isoff-live:2013" and one or more representations with @profiles set to both of 
         *						these. When the play method is called on the video element, no segments for Representations with @profiles set
         *						only to "urn:hbbtv:dash:profile:isoff-live:2013" are requested by the terminal.
         *************************************************************************************************************************************/
        var MPD_URL = null; // will be constructed after session init
        var MPD_PATH_RELATIVE = "TESTS/org.hbbtv_DASH_PROFILES0110/DASH_PROFILES0110.mpd";
        var MPD_SERVE_URL = "http://hbbtv1.test/_TESTSUITE/RES/CONTRIBUTORS/RT-RK/dash_static_mpd_serve.php";
        var RESULT_URL = "http://hbbtv1.test/_TESTSUITE/RES/CONTRIBUTORS/RT-RK/dash_get_result.php"; // url of php script that retrieves results
        var STEP2_FILE = "request_log.json"; // url of file that contains the whole sequence of segment requests

        var WAIT_AFTER_PLAYBACK_IS_STARTED = 80*1000;
        var STEP1_PASS = WAIT_AFTER_PLAYBACK_IS_STARTED / 1000 + " seconds have passed. This is enough time to ensure that no segments for Representations with @profiles set only to 'urn:hbbtv:dash:profile:isoff-live:2013' are requested by the terminal..";
        var STEP1_FAIL_PLAYER = "Failed to obtain HTML5 player.";
        var STEP1_FAIL_PLAYSTATE = "DASH player is in the error state.";
        var STEP2_PASS = "No segments for Representations with @profiles attribute set only to 'urn:hbbtv:dash:profile:isoff-live:2013' are requested by the terminal";
        var STEP2_FAIL = "Segments for Representations with @profiles attribute set only to 'urn:hbbtv:dash:profile:isoff-live:2013' are requested by the terminal";
        var STEP2_OBJECT_NOT_SET = "Requested report doesn't exist.";
        var STEP2_REPORT_EMPTY = "Requested report is empty.";

        var SESSION_INIT = "http://hbbtv1.test/_TESTSUITE/RES/CONTRIBUTORS/RT-RK/test_session_init.php";
        var SESSION_ID = null;
        var SESSION_START_FAIL = "Failed to start test session on server. Error received:";
        var INFO_SESSION_INITIALIZED = "Test session has been initialized.";

        var VALID_URL = "hbbtv1.test/_TESTSUITE/TESTS/org.hbbtv_DASH_PROFILES0110/segment_server_valid_profile";

        var testUiOptions = {
            tcId: "org.hbbtv_DASH_PROFILES0110",
            description: "Representation: Non-standard HbbTV not supported",
            type: "small",
            position: "middle center"
        };

        window.onload = function() {
            asyncWaterfall([
                    function(callback) { visualApiInitialize(callback, testUiOptions); },
                    initTestSession,
                    releaseDecodingResources,
                    step1_playContent,
                    step2_checkRequestSequence
                ],
                function(error, result) {
                    if (error) {
                        gTestApi.reportStepResult(error.testStep, false, error.message);
                    }
                    gTestApi.endTest();
                }
            );
        };
       
        /**
         * This callback type is called `AWFCallback` and is displayed as a global symbol.
         * @callback AWFCallback
         * @param {object} - provides information about why the test step failed
         * @param {boolean} - true if the test step passed, false otherwise
         */

        /**
         *  @desc Get unique session ID on the server which will be used to store test specific data.  
         *  @param {AWFCallback} callback - The callback that continues the AWF onto the next step
         */
        function initTestSession(callback) {
            ajaxCall(SESSION_INIT, function(response) {

                var result = JSON.parse(response);

                if(result.hasOwnProperty('SESSION_ID')) {
                    SESSION_ID = result.SESSION_ID;
                }

                // construct the MPD url (that should also be present in the terminal's error report) using the acquired SESSION ID 
                // As PHP serves MPD file, make complete request URL which contains path to mpd file and session id as GET parameter
                MPD_URL = MPD_SERVE_URL + "?path=" + MPD_PATH_RELATIVE + "&sid=" + SESSION_ID;
                RESULT_URL = RESULT_URL + "?file=" + STEP2_FILE + "&sid=" + SESSION_ID;
                gTestApi.reportMessage(INFO_SESSION_INITIALIZED);
                callback(null);
            }, 
            function (error) {
                callback({"message": SESSION_START_FAIL+error, "testStep": 1});
            });
        }

        /**
         *  @desc Play the content using the HTML5 player.
         *  @param {AWFCallback} callback - The callback that continues the AWF onto the next step
         */
        function step1_playContent(callback) {
            var step = 1;
            var error = {
                testStep: step
            };

            var player = document.getElementById("player");
            if (!objectIsSet(player)) {
                error.message = STEP1_FAIL_PLAYER;
                callback(error, false);
                return;
            }

            var sourceElement = document.createElement("source");
            sourceElement.setAttribute("type", "application/dash+xml");
            sourceElement.setAttribute("src", MPD_URL);
            player.appendChild(sourceElement);

            startPlayback(callback, step, player, null, function(playState) {

                switch (playState) {
                    case 1 /*PLAYING*/ :
                        gTestApi.reportMessage("MPEG DASH playback successfully started and will play for " + (WAIT_AFTER_PLAYBACK_IS_STARTED / 1000) + " seconds...");
                        //play content for enough time to make log with segment requests 
                        setTimeout(function() {
                            gTestApi.reportStepResult(step, true, STEP1_PASS);
                            callback(null);
                        }, WAIT_AFTER_PLAYBACK_IS_STARTED);
                        break;
                    case 6:
                        /*ERROR*/
                        error.message = STEP1_FAIL_PLAYSTATE;
                        callback(error, false);
                        return; //end test
                }
            }, true);
        }

        /**
         *  @desc this function checks if wrong segment requests were requested by terminal
         *  @param {AWFCallback} callback - The callback that continues the AWF onto the next step
         */
        function step2_checkRequestSequence(callback) {
            var step = 2;
            // variable that represents error, contains step in which error has occurred and error message
            var error = {
                testStep: step
            };

            ajaxCall(RESULT_URL, function(response) {

                var requests = JSON.parse(response);
                if (!(objectIsSet(requests))) {
                    error.message = STEP2_OBJECT_NOT_SET;
                    callback(error, false);
                    return;
                }

                if ((typeof requests.length === "undefined") || requests.length === 0) {
                    error.message = STEP2_REPORT_EMPTY;
                    callback(error, false);
                    return;
                }

                var i = 0;

                // check if the following segments are requested from Adaptation Sets with valid '@profiles' attribute in Representations
                for (i = 0; i < requests.length; i++) {
                    if (!(isLoadedURL(requests[i], VALID_URL))) {
                        error.message = STEP2_FAIL;
                        callback(error, false);
                        return;
                    }
                }

                gTestApi.reportStepResult(step, true, STEP2_PASS);
                callback(null);

            });
        }
        //]]>
    </script>
</head>

<body>

    <object id="appmgr" type="application/oipfApplicationManager" style="width:0;height:0;position: absolute;"></object>
    <object id="video" type="video/broadcast" style="width:0; height:0; position: absolute;"></object>
    <video style="visibility: visible; position: absolute; left: 0px; top: 0px; width: 1280px; height: 720px;" id="player"></video>

</body>

</html>